// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eTuristickaAgencija.Service.Database;

#nullable disable

namespace eTuristickaAgencija.Service.Migrations
{
    [DbContext(typeof(TuristickaAgencijaContext))]
    [Migration("20230912102435_dataseed")]
    partial class dataseed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Agencija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresa")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Agencija", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adresa = "Trg Ivana Krndelja 35, 88000 Mostar",
                            Email = "agencija@gmail.com",
                            Telefon = "061-235-886"
                        });
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Clan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DatumRegistracije")
                        .HasColumnType("datetime");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_Clan_KorisnikID");

                    b.ToTable("Clan", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumRegistracije = new DateTime(2021, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 2
                        });
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Destinacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("GradId")
                        .HasColumnType("int")
                        .HasColumnName("GradID");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("StateMachine")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GradId" }, "IX_Destinacija_GradID");

                    b.ToTable("Destinacija", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GradId = 2,
                            Naziv = "Putovanje u Maleziju"
                        },
                        new
                        {
                            Id = 2,
                            GradId = 1,
                            Naziv = "Putovanje u Istanbul"
                        },
                        new
                        {
                            Id = 3,
                            GradId = 1,
                            Naziv = "Putovanje u Istanbul2"
                        },
                        new
                        {
                            Id = 4,
                            GradId = 2,
                            Naziv = "Putovanje u Maleziju2"
                        });
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Drzava", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("KontinentId")
                        .HasColumnType("int")
                        .HasColumnName("KontinentID");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "KontinentId" }, "IX_Drzava_KontinentID");

                    b.ToTable("Drzava", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            KontinentId = 1,
                            Naziv = "Turska"
                        },
                        new
                        {
                            Id = 2,
                            KontinentId = 2,
                            Naziv = "Malezija"
                        });
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Grad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DrzavaId")
                        .HasColumnType("int")
                        .HasColumnName("DrzavaID");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DrzavaId" }, "IX_Grad_DrzavaID");

                    b.ToTable("Grad", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DrzavaId = 1,
                            Naziv = "Istanbul"
                        },
                        new
                        {
                            Id = 2,
                            DrzavaId = 2,
                            Naziv = "Kuala Lumpur"
                        });
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrojZvjezdica")
                        .HasColumnType("int");

                    b.Property<int?>("GradId")
                        .HasColumnType("int")
                        .HasColumnName("GradID");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GradId" }, "IX_Hotel_GradID");

                    b.ToTable("Hotel", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrojZvjezdica = 5,
                            GradId = 2,
                            Naziv = "Levent"
                        },
                        new
                        {
                            Id = 2,
                            BrojZvjezdica = 4,
                            GradId = 1,
                            Naziv = "Hotel Malezija"
                        });
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Kartum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<bool>("Ponistena")
                        .HasColumnType("bit");

                    b.Property<int?>("TerminId")
                        .HasColumnType("int")
                        .HasColumnName("TerminID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_Karta_KorisnikID");

                    b.HasIndex(new[] { "TerminId" }, "IX_Karta_TerminID");

                    b.ToTable("Karta");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumKreiranja = new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 2,
                            Ponistena = false,
                            TerminId = 1
                        });
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Kontinent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Kontinent", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Evropa"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Azija"
                        });
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Korisnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KorisnikoIme")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LozinkaHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("UlogaId")
                        .HasColumnType("int")
                        .HasColumnName("UlogaID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UlogaId" }, "IX_Korisnik_UlogaID");

                    b.ToTable("Korisnik", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "nijaz@gmail.com",
                            Ime = "Nijaz",
                            KorisnikoIme = "admin",
                            LozinkaHash = "MSGjpAW8IykbbTyw5Y6lA0PP9H8=",
                            LozinkaSalt = "a8eFAPndUYNa9N4OKBzvaQ==",
                            Prezime = "Ljevo",
                            UlogaId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "amna@gmail.com",
                            Ime = "Amna",
                            KorisnikoIme = "mobile",
                            LozinkaHash = "clRZxhF9jPoDvFxpfZQHisUL0/s=",
                            LozinkaSalt = "Lu7sAE3kAOmL7eU/Szkq5A==",
                            Prezime = "Spahalic",
                            UlogaId = 2
                        });
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Ocjena", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DestinacijaId")
                        .HasColumnType("int")
                        .HasColumnName("DestinacijaID");

                    b.Property<string>("Komentar")
                        .HasColumnType("text");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<int>("OcjenaUsluge")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DestinacijaId" }, "IX_Ocjena_DestinacijaID");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_Ocjena_KorisnikID");

                    b.ToTable("Ocjena", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DestinacijaId = 1,
                            Komentar = "Odlicno",
                            KorisnikId = 2,
                            OcjenaUsluge = 5
                        });
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Rezervacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<DateTime>("DatumRezervacije")
                        .HasColumnType("datetime");

                    b.Property<int?>("HotelId")
                        .HasColumnType("int")
                        .HasColumnName("HotelID");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<bool?>("Otkazana")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "HotelId" }, "IX_Rezervacija_HotelID");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_Rezervacija_KorisnikID");

                    b.ToTable("Rezervacija", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cijena = 300m,
                            DatumRezervacije = new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 1,
                            KorisnikId = 2,
                            Otkazana = false
                        });
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Termin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AktivanTermin")
                        .HasColumnType("bit");

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<decimal?>("CijenaPopust")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<DateTime>("DatumDolaska")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DatumPolaska")
                        .HasColumnType("datetime");

                    b.Property<int?>("DestinacijaId")
                        .HasColumnType("int")
                        .HasColumnName("DestinacijaID");

                    b.Property<int?>("GradId")
                        .HasColumnType("int")
                        .HasColumnName("GradID");

                    b.Property<int?>("HotelId")
                        .HasColumnType("int")
                        .HasColumnName("HotelID");

                    b.Property<float?>("Popust")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DestinacijaId" }, "IX_Termin_DestinacijaID");

                    b.HasIndex(new[] { "GradId" }, "IX_Termin_GradID");

                    b.HasIndex(new[] { "HotelId" }, "IX_Termin_HotelID");

                    b.ToTable("Termin", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AktivanTermin = true,
                            Cijena = 900m,
                            CijenaPopust = 0m,
                            DatumDolaska = new DateTime(2021, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumPolaska = new DateTime(2021, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinacijaId = 1,
                            GradId = 2,
                            HotelId = 1,
                            Popust = 0f
                        },
                        new
                        {
                            Id = 2,
                            AktivanTermin = true,
                            Cijena = 700m,
                            CijenaPopust = 0m,
                            DatumDolaska = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumPolaska = new DateTime(2021, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinacijaId = 1,
                            GradId = 2,
                            HotelId = 1,
                            Popust = 0f
                        },
                        new
                        {
                            Id = 3,
                            AktivanTermin = true,
                            Cijena = 1100m,
                            CijenaPopust = 0m,
                            DatumDolaska = new DateTime(2022, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumPolaska = new DateTime(2022, 1, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinacijaId = 2,
                            GradId = 2,
                            HotelId = 1,
                            Popust = 0f
                        },
                        new
                        {
                            Id = 4,
                            AktivanTermin = true,
                            Cijena = 1300m,
                            CijenaPopust = 0m,
                            DatumDolaska = new DateTime(2021, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumPolaska = new DateTime(2021, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinacijaId = 2,
                            GradId = 2,
                            HotelId = 1,
                            Popust = 0f
                        },
                        new
                        {
                            Id = 5,
                            AktivanTermin = true,
                            Cijena = 1300m,
                            CijenaPopust = 0m,
                            DatumDolaska = new DateTime(2022, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumPolaska = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinacijaId = 3,
                            GradId = 1,
                            HotelId = 2,
                            Popust = 0f
                        },
                        new
                        {
                            Id = 6,
                            AktivanTermin = true,
                            Cijena = 1200m,
                            CijenaPopust = 0m,
                            DatumDolaska = new DateTime(2021, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumPolaska = new DateTime(2021, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinacijaId = 3,
                            GradId = 1,
                            HotelId = 2,
                            Popust = 0f
                        },
                        new
                        {
                            Id = 7,
                            AktivanTermin = true,
                            Cijena = 1500m,
                            CijenaPopust = 0m,
                            DatumDolaska = new DateTime(2021, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumPolaska = new DateTime(2021, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinacijaId = 4,
                            GradId = 1,
                            HotelId = 2,
                            Popust = 0f
                        });
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Uloga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Uloga", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Turist"
                        });
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Uplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrojTransakcije")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DatumTransakcije")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Iznos")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Uplate__3214EC0785DC839F");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Uplate", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Iznos = 500m,
                            KorisnikId = 2
                        });
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Uposlenik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Aktivan")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DatumZaposlenja")
                        .HasColumnType("datetime");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_Uposlenik_KorisnikID");

                    b.ToTable("Uposlenik", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Aktivan = true,
                            DatumZaposlenja = new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 1
                        });
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Clan", b =>
                {
                    b.HasOne("eTuristickaAgencija.Service.Database.Korisnik", "Korisnik")
                        .WithMany("Clans")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_Clan_korisnik");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Destinacija", b =>
                {
                    b.HasOne("eTuristickaAgencija.Service.Database.Grad", "Grad")
                        .WithMany("Destinacijas")
                        .HasForeignKey("GradId")
                        .HasConstraintName("FK_Grad_Destinacija");

                    b.Navigation("Grad");
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Drzava", b =>
                {
                    b.HasOne("eTuristickaAgencija.Service.Database.Kontinent", "Kontinent")
                        .WithMany("Drzavas")
                        .HasForeignKey("KontinentId")
                        .HasConstraintName("FK_Kontinent_Drzava");

                    b.Navigation("Kontinent");
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Grad", b =>
                {
                    b.HasOne("eTuristickaAgencija.Service.Database.Drzava", "Drzava")
                        .WithMany("Grads")
                        .HasForeignKey("DrzavaId")
                        .HasConstraintName("FK_Grad_Drzava");

                    b.Navigation("Drzava");
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Hotel", b =>
                {
                    b.HasOne("eTuristickaAgencija.Service.Database.Grad", "Grad")
                        .WithMany("Hotels")
                        .HasForeignKey("GradId")
                        .HasConstraintName("FK_Grad1");

                    b.Navigation("Grad");
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Kartum", b =>
                {
                    b.HasOne("eTuristickaAgencija.Service.Database.Korisnik", "Korisnik")
                        .WithMany("Karta")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("fk_Korisnik_Karta");

                    b.HasOne("eTuristickaAgencija.Service.Database.Termin", "Termin")
                        .WithMany("Karta")
                        .HasForeignKey("TerminId")
                        .HasConstraintName("FK_Karta_Termin");

                    b.Navigation("Korisnik");

                    b.Navigation("Termin");
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Korisnik", b =>
                {
                    b.HasOne("eTuristickaAgencija.Service.Database.Uloga", "Uloga")
                        .WithMany("Korisniks")
                        .HasForeignKey("UlogaId")
                        .HasConstraintName("FK_Korisnik_Uloga");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Ocjena", b =>
                {
                    b.HasOne("eTuristickaAgencija.Service.Database.Destinacija", "Destinacija")
                        .WithMany("Ocjenas")
                        .HasForeignKey("DestinacijaId")
                        .HasConstraintName("fk_Destinacija");

                    b.HasOne("eTuristickaAgencija.Service.Database.Korisnik", "Korisnik")
                        .WithMany("Ocjenas")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("fk_Korisnik");

                    b.Navigation("Destinacija");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Rezervacija", b =>
                {
                    b.HasOne("eTuristickaAgencija.Service.Database.Hotel", "Hotel")
                        .WithMany("Rezervacijas")
                        .HasForeignKey("HotelId")
                        .HasConstraintName("FK_Rezervacija_Hotel");

                    b.HasOne("eTuristickaAgencija.Service.Database.Korisnik", "Korisnik")
                        .WithMany("Rezervacijas")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_Rezervacija_Korisnik");

                    b.Navigation("Hotel");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Termin", b =>
                {
                    b.HasOne("eTuristickaAgencija.Service.Database.Destinacija", "Destinacija")
                        .WithMany("Termins")
                        .HasForeignKey("DestinacijaId")
                        .HasConstraintName("FK_Termin_Destinacija");

                    b.HasOne("eTuristickaAgencija.Service.Database.Grad", "Grad")
                        .WithMany("Termins")
                        .HasForeignKey("GradId")
                        .HasConstraintName("FK_Termin_Grad");

                    b.HasOne("eTuristickaAgencija.Service.Database.Hotel", "Hotel")
                        .WithMany("Termins")
                        .HasForeignKey("HotelId")
                        .HasConstraintName("FK_Angazman_Hotel");

                    b.Navigation("Destinacija");

                    b.Navigation("Grad");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Uplate", b =>
                {
                    b.HasOne("eTuristickaAgencija.Service.Database.Korisnik", "Korisnik")
                        .WithMany("Uplates")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK__Uplate__Korisnik__6FE99F9F");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Uposlenik", b =>
                {
                    b.HasOne("eTuristickaAgencija.Service.Database.Korisnik", "Korisnik")
                        .WithMany("Uposleniks")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_Uposlenik_korisnik");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Destinacija", b =>
                {
                    b.Navigation("Ocjenas");

                    b.Navigation("Termins");
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Drzava", b =>
                {
                    b.Navigation("Grads");
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Grad", b =>
                {
                    b.Navigation("Destinacijas");

                    b.Navigation("Hotels");

                    b.Navigation("Termins");
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Hotel", b =>
                {
                    b.Navigation("Rezervacijas");

                    b.Navigation("Termins");
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Kontinent", b =>
                {
                    b.Navigation("Drzavas");
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Korisnik", b =>
                {
                    b.Navigation("Clans");

                    b.Navigation("Karta");

                    b.Navigation("Ocjenas");

                    b.Navigation("Rezervacijas");

                    b.Navigation("Uplates");

                    b.Navigation("Uposleniks");
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Termin", b =>
                {
                    b.Navigation("Karta");
                });

            modelBuilder.Entity("eTuristickaAgencija.Service.Database.Uloga", b =>
                {
                    b.Navigation("Korisniks");
                });
#pragma warning restore 612, 618
        }
    }
}
